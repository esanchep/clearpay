{"version":3,"sources":["./src/app/store/effects/transactions.effects.ts","./src/app/store/effects/wallets.effects.ts","./src/app/shared/components/notification/notification.service.ts","./src/app/shared/components/notification/notification.module.ts","./src/app/store/actions/transactions.actions.ts","./src/environments/environment.ts","./src/app/store/reducers/transactions.reducers.ts","./src/app/store/reducers/wallets.reducers.ts","./src/app/store/effects/index.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/store/actions/new-transaction.actions.ts","./src/app/store/actions/users.actions.ts","./src/app/administration/transactions/transactions.service.ts","./src/app/app.module.ts","./src/app/store/effects/users.effects.ts","./src/app/shared/components/notification/notification.component.ts","./src/app/shared/components/notification/notification.component.html","./src/app/administration/users/users.service.ts","./src/app/store/actions/wallets.actions.ts","./src/app/store/reducers/new-transaction.reducers.ts","./src/assets/i18n/literals.ts","./src/app/store/effects/new-transaction.effects.ts","./src/app/store/reducers/users.reducers.ts","./src/app/store/reducers/index.ts","./src/app/store/actions/index.ts","./src/app/app-routing.module.ts","./src/app/shared/components/notification/notification.models.ts","./src/app/administration/wallets/wallets.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { Literal } from 'src/assets/i18n/literals';\r\nimport { fromTransactionsActions } from '../actions';\r\nimport { RootState } from '../states';\r\nimport { Transaction } from './../../administration/transactions/transactions.models';\r\nimport { TransactionsService } from './../../administration/transactions/transactions.service';\r\nimport { NotificationService } from './../../shared/components/notification/notification.service';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\n\r\n@Injectable()\r\nexport class TransactionsEffects {\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private notificationService: NotificationService,\r\n    private store: Store<RootState>,\r\n    private transactionsService: TransactionsService\r\n  ) { }\r\n\r\n  getTransactionsByWalletId$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(fromTransactionsActions.getTransactionsByWalletId),\r\n      switchMap((wallet: { walletId: string; }) => this.transactionsService.getTransactionsByWallet(wallet.walletId).pipe(\r\n        map((response: ApiResponse<Transaction[]>) => {\r\n          if (!response.body) {\r\n            this.notificationService.error(Literal.administration.transactions.errorGettingTransactions);\r\n            return fromTransactionsActions.getTransactionsByWalletIdFailed();\r\n          }\r\n          return fromTransactionsActions.getTransactionsByWalletIdSuccess(response);\r\n        })\r\n      )),\r\n      catchError(() => {\r\n        this.notificationService.error(Literal.administration.transactions.errorGettingTransactions);\r\n        this.store.dispatch(fromTransactionsActions.resetState());\r\n        return of(fromTransactionsActions.getTransactionsByWalletIdFailed());\r\n      })\r\n    )\r\n  );\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { RootState } from '../states';\r\nimport { Literal } from './../../../assets/i18n/literals';\r\nimport { Wallet } from './../../administration/wallets/wallets.models';\r\nimport { WalletsService } from './../../administration/wallets/wallets.service';\r\nimport { NotificationService } from './../../shared/components/notification/notification.service';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { fromTransactionsActions, fromWalletsActions } from './../actions';\r\n\r\n@Injectable()\r\nexport class WalletsEffects {\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private notificationService: NotificationService,\r\n    private store: Store<RootState>,\r\n    private walletsService: WalletsService\r\n  ) { }\r\n\r\n  getWalletsByUserId$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(fromWalletsActions.getWalletsByUserId),\r\n      switchMap((user: { userId: string; }) => this.walletsService.getWalletsByUserId(user.userId).pipe(\r\n        map((response: ApiResponse<Wallet[]>) => {\r\n          if (!response.body) {\r\n            this.notificationService.error(Literal.administration.wallets.errorGettingWallets);\r\n            return fromWalletsActions.getWalletsByUserIdFailed();\r\n          }\r\n          return fromWalletsActions.getWalletsByUserIdSuccess(response);\r\n        })\r\n      )),\r\n      catchError(() => {\r\n        this.notificationService.error(Literal.administration.wallets.errorGettingWallets);\r\n        this.store.dispatch(fromWalletsActions.resetState());\r\n        this.store.dispatch(fromTransactionsActions.resetState());\r\n        return of(fromWalletsActions.getWalletsByUserIdFailed());\r\n      })\r\n    )\r\n  );\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { NotificationComponent } from './notification.component';\nimport { NotificationType } from './notification.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private DEFAULT_TIMING = 5000;\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  success(message: string, parameters?: any, timing?: number): void {\n    this.openSnackBar(message, NotificationType.SUCCESS, timing, parameters, 'success');\n  }\n\n  error(message: string, parameters?: any, timing?: number): void {\n    this.openSnackBar(message, NotificationType.ERROR, timing, parameters, 'error');\n  }\n\n  private openSnackBar(message: string, type: string, parameters?: any, timing?: number, panelClass?: string): void {\n    this.snackBar.openFromComponent(NotificationComponent, {\n      duration: timing ? timing : this.DEFAULT_TIMING,\n      data: parameters ? { message, type, parameters } : { message, type },\n      panelClass: ['notification', panelClass]\n    });\n  }\n\n}\n","import { CommonModule } from '@angular/common';\r\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { NotificationComponent } from './notification.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NotificationComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    TranslateModule\r\n  ],\r\n  exports: [NotificationComponent, MatSnackBarModule],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class NotificationModule { }\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { Transaction } from './../../administration/transactions/transactions.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\n\r\nconst TRANSACTIONS = '[Transactions]';\r\n\r\nexport const TransactionAction = {\r\n  RESET_STATE: `${TRANSACTIONS} Reset State`,\r\n  GET_TRANSACTIONS_BY_WALLET_ID: `${TRANSACTIONS} Get Transactions by Wallet ID`,\r\n  GET_TRANSACTIONS_BY_WALLET_ID_SUCCESS: `${TRANSACTIONS} Get Transactions by Wallet ID success`,\r\n  GET_TRANSACTIONS_BY_WALLET_ID_FAILED: `${TRANSACTIONS} Get Transactions by Wallet ID failed`,\r\n  ADD_TRANSACTION_TO_LIST: `${TRANSACTIONS} Add Transaction to list`\r\n};\r\n\r\nexport const resetState = createAction(\r\n  TransactionAction.RESET_STATE\r\n);\r\n\r\nexport const getTransactionsByWalletId = createAction(\r\n  TransactionAction.GET_TRANSACTIONS_BY_WALLET_ID,\r\n  props<{ walletId: string; }>()\r\n);\r\n\r\nexport const getTransactionsByWalletIdSuccess = createAction(\r\n  TransactionAction.GET_TRANSACTIONS_BY_WALLET_ID_SUCCESS,\r\n  props<ApiResponse<Transaction[]>>()\r\n);\r\n\r\nexport const getTransactionsByWalletIdFailed = createAction(\r\n  TransactionAction.GET_TRANSACTIONS_BY_WALLET_ID_FAILED\r\n);\r\n\r\nexport const addTransactionToList = createAction(\r\n  TransactionAction.ADD_TRANSACTION_TO_LIST,\r\n  props<Transaction>()\r\n);\r\n","import { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n\r\n// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const DevStoreModule = [\r\n  StoreDevtoolsModule.instrument()\r\n];\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { Transaction } from 'src/app/administration/transactions/transactions.models';\r\nimport { ApiResponse } from '../../shared/models/response.models';\r\nimport { fromTransactionsActions } from '../actions';\r\nimport { TransactionsState } from '../states';\r\n\r\nexport const INITIAL_TRANSACTIONS_STATE: TransactionsState = undefined;\r\n\r\nconst transactionsReducer = createReducer(\r\n  INITIAL_TRANSACTIONS_STATE,\r\n  on(\r\n    fromTransactionsActions.resetState,\r\n    fromTransactionsActions.getTransactionsByWalletId,\r\n    fromTransactionsActions.getTransactionsByWalletIdFailed,\r\n    () => INITIAL_TRANSACTIONS_STATE\r\n  ),\r\n  on(\r\n    fromTransactionsActions.getTransactionsByWalletIdSuccess,\r\n    (state: TransactionsState, data: ApiResponse<Transaction[]>) => ({\r\n      transactionList: data.body\r\n    })\r\n  ),\r\n  on(\r\n    fromTransactionsActions.addTransactionToList,\r\n    (state: TransactionsState, data: Transaction) => {\r\n      const updatedList = [...state.transactionList];\r\n      updatedList.unshift(data);\r\n      return {\r\n        ...state,\r\n        transactionList: updatedList\r\n      };\r\n    }\r\n  )\r\n);\r\n\r\nexport function reducer(state: TransactionsState, action: Action): TransactionsState {\r\n  return transactionsReducer(state, action);\r\n}\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { Wallet } from './../../administration/wallets/wallets.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { fromWalletsActions } from './../actions';\r\nimport { WalletsState } from './../states';\r\n\r\nexport const INITIAL_WALLETS_STATE: WalletsState = undefined;\r\n\r\nconst walletsReducer = createReducer(\r\n  INITIAL_WALLETS_STATE,\r\n  on(\r\n    fromWalletsActions.resetState,\r\n    fromWalletsActions.getWalletsByUserId,\r\n    fromWalletsActions.getWalletsByUserIdFailed,\r\n    () => INITIAL_WALLETS_STATE\r\n  ),\r\n  on(\r\n    fromWalletsActions.getWalletsByUserIdSuccess,\r\n    (state: WalletsState, data: ApiResponse<Wallet[]>) => ({\r\n      walletList: data.body\r\n    })\r\n  ),\r\n  on(\r\n    fromWalletsActions.setSelectedWallet,\r\n    (state: WalletsState, data: Wallet) => ({ ...state, selectedWallet: data})\r\n  )\r\n);\r\n\r\nexport function reducer(state: WalletsState, action: Action): WalletsState {\r\n  return walletsReducer(state, action);\r\n}\r\n","import * as fromNewTransactionEffects from './new-transaction.effects';\r\nimport * as fromTransactionsEffects from './transactions.effects';\r\nimport * as fromUsersEffects from './users.effects';\r\nimport * as fromWalletsEffects from './wallets.effects';\r\n\r\nexport {\r\n  fromNewTransactionEffects,\r\n  fromTransactionsEffects,\r\n  fromUsersEffects,\r\n  fromWalletsEffects\r\n};\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Literal } from 'src/assets/i18n/literals';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  constructor(\r\n    titleService: Title,\r\n    translateService: TranslateService\r\n  ) {\r\n    this.setAppTitle(titleService, translateService);\r\n  }\r\n\r\n  private setAppTitle(titleService: Title, translateService: TranslateService): void {\r\n    translateService.setDefaultLang('en');\r\n    translateService.get('page_title').subscribe((res: string) => {\r\n      titleService.setTitle(translateService.instant(Literal.app.title));\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\n  <div class=\"icon\"></div>\n</mat-toolbar>\n<div class=\"content\">\n  <router-outlet></router-outlet>\n</div>\n","import { createAction, props } from '@ngrx/store';\r\nimport { Transaction } from './../../administration/transactions/transactions.models';\r\nimport { User } from './../../administration/users/users.models';\r\nimport { Wallet } from './../../administration/wallets/wallets.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\n\r\nconst NEW_TRANSACTION = '[New Transaction]';\r\n\r\nexport const NewTransactionAction = {\r\n  RESET_STATE: `${NEW_TRANSACTION} Reset State`,\r\n  RESET_DESTINATION_WALLETS: `${NEW_TRANSACTION} Reset destination Wallets`,\r\n  SET_SOURCE_USER: `${NEW_TRANSACTION} Set source User`,\r\n  SET_SOURCE_WALLET: `${NEW_TRANSACTION} Set source Wallet`,\r\n  GET_ELIGIBLE_DESTINATION_WALLETS: `${NEW_TRANSACTION} Get eligible destination Wallets`,\r\n  GET_ELIGIBLE_DESTINATION_WALLETS_SUCCESS: `${NEW_TRANSACTION} Get eligible destination Wallets success`,\r\n  GET_ELIGIBLE_DESTINATION_WALLETS_FAILED: `${NEW_TRANSACTION} Get eligible destination Wallets failed`,\r\n  ADD_NEW_TRANSACTION: `${NEW_TRANSACTION} Add new Transaction`,\r\n  ADD_NEW_TRANSACTION_SUCCESS: `${NEW_TRANSACTION} Add new Transaction success`,\r\n  ADD_NEW_TRANSACTION_FAILED: `${NEW_TRANSACTION} Add new Transaction failed`,\r\n};\r\n\r\nexport const resetState = createAction(\r\n  NewTransactionAction.RESET_STATE\r\n);\r\n\r\nexport const resetDestinationWallets = createAction(\r\n  NewTransactionAction.RESET_DESTINATION_WALLETS\r\n);\r\n\r\nexport const setSourceUser = createAction(\r\n  NewTransactionAction.SET_SOURCE_USER,\r\n  props<User>()\r\n);\r\n\r\nexport const setSourceWallet = createAction(\r\n  NewTransactionAction.SET_SOURCE_WALLET,\r\n  props<Wallet>()\r\n);\r\n\r\nexport const getDestinationWalletsByUserId = createAction(\r\n  NewTransactionAction.GET_ELIGIBLE_DESTINATION_WALLETS,\r\n  props<{ userId: string }>()\r\n);\r\n\r\nexport const getDestinationWalletsByUserIdSuccess = createAction(\r\n  NewTransactionAction.GET_ELIGIBLE_DESTINATION_WALLETS_SUCCESS,\r\n  props<ApiResponse<Wallet[]>>()\r\n);\r\n\r\nexport const getDestinationWalletsByUserIdFailed = createAction(\r\n  NewTransactionAction.GET_ELIGIBLE_DESTINATION_WALLETS_FAILED\r\n);\r\n\r\nexport const addNewTransaction = createAction(\r\n  NewTransactionAction.ADD_NEW_TRANSACTION,\r\n  props<Transaction>()\r\n);\r\n\r\nexport const addNewTransactionSuccess = createAction(\r\n  NewTransactionAction.ADD_NEW_TRANSACTION_SUCCESS,\r\n  props<ApiResponse<Transaction>>()\r\n);\r\n\r\nexport const addNewTransactionFailed = createAction(\r\n  NewTransactionAction.ADD_NEW_TRANSACTION_FAILED\r\n);\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { User } from './../../administration/users/users.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\n\r\nconst USERS = '[Users]';\r\n\r\nexport const UserAction = {\r\n  RESET_STATE: `${USERS} Reset State`,\r\n  GET_ALL_USERS: `${USERS} Get all users`,\r\n  GET_ALL_USERS_SUCCESS: `${USERS} Get all users success`,\r\n  GET_ALL_USERS_FAILED: `${USERS} Get all users failed`,\r\n  SET_SELECTED_USER: `${USERS} Set selected user`\r\n};\r\n\r\nexport const resetState = createAction(\r\n  UserAction.RESET_STATE\r\n);\r\n\r\nexport const getAllUsers = createAction(\r\n  UserAction.GET_ALL_USERS\r\n);\r\n\r\nexport const getAllUsersSuccess = createAction(\r\n  UserAction.GET_ALL_USERS_SUCCESS,\r\n  props<ApiResponse<User[]>>()\r\n);\r\n\r\nexport const getAllUsersFailed = createAction(\r\n  UserAction.GET_ALL_USERS_FAILED\r\n);\r\n\r\nexport const setSelectedUser = createAction(\r\n  UserAction.SET_SELECTED_USER,\r\n  props<User>()\r\n);\r\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiResponse } from './../../shared/models/response.models';\nimport { Transaction } from './transactions.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n\n  constructor(private http: HttpClient) { }\n\n  getTransactionsByWallet(walletId: string): Observable<ApiResponse<Transaction[]>> {\n    return this.http.get<ApiResponse<Transaction[]>>(`/wallet/${walletId}/transactions`);\n  }\n\n  addNewTransaction(request: Transaction): Observable<ApiResponse<Transaction>> {\n    return this.http.post<ApiResponse<Transaction>>(`/wallet/${request.sourceWalletId}/transactions`, request);\n  }\n}\n","import { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { CUSTOM_ELEMENTS_SCHEMA, NgModule } from '@angular/core';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { DevStoreModule } from 'src/environments/environment';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NotificationModule } from './shared/components/notification/notification.module';\nimport { fromNewTransactionEffects, fromTransactionsEffects, fromUsersEffects, fromWalletsEffects } from './store/effects';\nimport { reducers } from './store/reducers';\n\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    BrowserModule,\n    EffectsModule.forRoot([\n      fromNewTransactionEffects.NewTransactionEffects,\n      fromTransactionsEffects.TransactionsEffects,\n      fromUsersEffects.UsersEffects,\n      fromWalletsEffects.WalletsEffects\n    ]),\n    HttpClientModule,\n    MatToolbarModule,\n    NotificationModule,\n    StoreModule.forRoot(reducers, {\n      runtimeChecks: {}\n    }),\n    DevStoreModule,\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  providers: [HttpClient],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { RootState } from '../states';\r\nimport { Literal } from './../../../assets/i18n/literals';\r\nimport { User } from './../../administration/users/users.models';\r\nimport { UsersService } from './../../administration/users/users.service';\r\nimport { NotificationService } from './../../shared/components/notification/notification.service';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { fromTransactionsActions, fromUsersActions, fromWalletsActions } from './../actions';\r\n\r\n@Injectable()\r\nexport class UsersEffects {\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private notificationService: NotificationService,\r\n    private store: Store<RootState>,\r\n    private usersService: UsersService\r\n  ) { }\r\n\r\n  getAllUsers$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(fromUsersActions.getAllUsers),\r\n      switchMap(() => this.usersService.getAllUsers().pipe(\r\n        map((response: ApiResponse<User[]>) => {\r\n          if (!response.body) {\r\n            this.notificationService.error(Literal.administration.users.errorGettingUsers);\r\n            return fromUsersActions.getAllUsersFailed();\r\n          }\r\n          return fromUsersActions.getAllUsersSuccess(response);\r\n        })\r\n      )),\r\n      catchError(() => {\r\n        this.notificationService.error(Literal.administration.users.errorGettingUsers);\r\n        this.store.dispatch(fromWalletsActions.resetState());\r\n        this.store.dispatch(fromTransactionsActions.resetState());\r\n        return of(fromUsersActions.getAllUsersFailed());\r\n      })\r\n    )\r\n  );\r\n\r\n}\r\n","import { Component, Inject } from '@angular/core';\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\nimport { NotificationData } from './notification.models';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.scss']\n})\nexport class NotificationComponent {\n  message: string;\n  type: string;\n  parameters: any;\n  icons = {\n    success: 'check_circle',\n    error: 'error'\n  };\n\n  constructor(\n    @Inject(MAT_SNACK_BAR_DATA) private data: NotificationData,\n    private dialogRef: MatSnackBarRef<NotificationComponent>\n  ) {\n    this.message = this.data.message;\n    this.type = this.data.type;\n    if (!!this.data.parameters) {\n      this.parameters = this.data.parameters;\n    }\n  }\n\n  closeDialog(): void {\n    this.dialogRef.dismiss();\n  }\n\n}\n","<div class=\"container\">\n  <mat-icon class=\"flex-start\" matSuffix [ngClass]=\"type\">{{icons[type]}}</mat-icon>\n  <span class=\"flex-center message\">{{message | translate}}</span>\n</div>\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ApiResponse } from './../../shared/models/response.models';\nimport { User } from './users.models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  constructor(private http: HttpClient) { }\n\n  getAllUsers(): Observable<ApiResponse<User[]>> {\n    return this.http.get<ApiResponse<User[]>>(`/user`);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\r\nimport { Wallet } from 'src/app/administration/wallets/wallets.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\n\r\nconst WALLETS = '[Wallets]';\r\n\r\nexport const WalletsActions = {\r\n  RESET_STATE: `${WALLETS} Reset State`,\r\n  GET_WALLETS_BY_USER_ID: `${WALLETS} Get Wallets by User ID`,\r\n  GET_WALLETS_BY_USER_ID_SUCCESS: `${WALLETS} Get Wallets by User ID success`,\r\n  GET_WALLETS_BY_USER_ID_FAILED: `${WALLETS} Get Wallets by User ID failed`,\r\n  SET_SELECTED_WALLET: `${WALLETS} Set selected Wallet`\r\n};\r\n\r\nexport const resetState = createAction(\r\n  WalletsActions.RESET_STATE\r\n);\r\n\r\nexport const getWalletsByUserId = createAction(\r\n  WalletsActions.GET_WALLETS_BY_USER_ID,\r\n  props<{ userId: string; }>()\r\n);\r\n\r\nexport const getWalletsByUserIdSuccess = createAction(\r\n  WalletsActions.GET_WALLETS_BY_USER_ID_SUCCESS,\r\n  props<ApiResponse<Wallet[]>>()\r\n);\r\n\r\nexport const getWalletsByUserIdFailed = createAction(\r\n  WalletsActions.GET_WALLETS_BY_USER_ID_FAILED\r\n);\r\n\r\nexport const setSelectedWallet = createAction(\r\n  WalletsActions.SET_SELECTED_WALLET,\r\n  props<Wallet>()\r\n);\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { fromNewTransactionActions } from '../actions';\r\nimport { User } from './../../administration/users/users.models';\r\nimport { Wallet } from './../../administration/wallets/wallets.models';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { NewTransactionState } from './../states/new-transaction.state';\r\n\r\nexport const INITIAL_NEW_TRANSACTION_STATE: NewTransactionState = undefined;\r\n\r\nconst newTransactionReducer = createReducer(\r\n  INITIAL_NEW_TRANSACTION_STATE,\r\n  on(\r\n    fromNewTransactionActions.resetState,\r\n    () => INITIAL_NEW_TRANSACTION_STATE\r\n  ),\r\n  on(\r\n    fromNewTransactionActions.setSourceUser,\r\n    (state: NewTransactionState, data: User) => ({\r\n      ...state,\r\n      sourceUser: data\r\n    })\r\n  ),\r\n  on(\r\n    fromNewTransactionActions.setSourceWallet,\r\n    (state: NewTransactionState, data: Wallet) => ({\r\n      ...state,\r\n      sourceWallet: data\r\n    })\r\n  ),\r\n  on(\r\n    fromNewTransactionActions.addNewTransaction,\r\n    (state: NewTransactionState) => ({ ...state })\r\n  ),\r\n  on(\r\n    fromNewTransactionActions.getDestinationWalletsByUserIdSuccess,\r\n    (state: NewTransactionState, data: ApiResponse<Wallet[]>) => ({\r\n      ...state,\r\n      destinationWallets: data.body\r\n    })\r\n  ),\r\n  on(\r\n    fromNewTransactionActions.resetDestinationWallets,\r\n    fromNewTransactionActions.addNewTransactionSuccess,\r\n    fromNewTransactionActions.addNewTransactionFailed,\r\n    fromNewTransactionActions.getDestinationWalletsByUserId,\r\n    fromNewTransactionActions.getDestinationWalletsByUserIdFailed,\r\n    (state: NewTransactionState) => ({\r\n      ...state,\r\n      destinationWallets: undefined\r\n    })\r\n  )\r\n);\r\n\r\nexport function reducer(state: NewTransactionState, action: Action): NewTransactionState {\r\n  return newTransactionReducer(state, action);\r\n}\r\n","export const Literal = {\r\n  app: {\r\n    title: 'app.title'\r\n  },\r\n  common: {\r\n    newTransaction: 'common.new-transaction',\r\n    balance: 'common.balance',\r\n    from: 'common.from',\r\n    amount: 'common.amount',\r\n    to: 'common.to',\r\n    comment: 'common.comment'\r\n  },\r\n  administration: {\r\n    title: 'administration.title',\r\n    users: {\r\n      title: 'administration.users.title',\r\n      username: 'administration.users.username',\r\n      name: 'administration.users.name',\r\n      surname: 'administration.users.surname',\r\n      errorGettingUsers: 'administration.users.error-getting-users'\r\n    },\r\n    wallets: {\r\n      title: 'administration.wallets.title',\r\n      alias: 'administration.wallets.alias',\r\n      errorGettingWallets: 'administration.wallets.error-getting-wallets'\r\n    },\r\n    transactions: {\r\n      title: 'administration.transactions.title',\r\n      date: 'administration.transactions.date',\r\n      sourceWallet: 'administration.transactions.sourceWallet',\r\n      destinationWallet: 'administration.transactions.destinationWallet',\r\n      errorGettingTransactions: 'administration.transactions.error-getting-transactions'\r\n    },\r\n    newTransaction: {\r\n      user: 'administration.new-transaction.user',\r\n      wallet: 'administration.new-transaction.wallet',\r\n      cancel: 'administration.new-transaction.cancel',\r\n      add: 'administration.new-transaction.add',\r\n      fieldRequired: 'administration.new-transaction.field-required',\r\n      invalidAmount: 'administration.new-transaction.invalid-amount',\r\n      transactionHasBeenSuccessfullyAdded: 'administration.new-transaction.transaction-has-been-successfully-added',\r\n      errorGettingWallets: 'administration.new-transaction.error-getting-wallets',\r\n      errorAddingNewTransaction: 'administration.new-transaction.error-adding-new-transaction'\r\n    }\r\n  }\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport { catchError, map, switchMap } from 'rxjs/operators';\r\nimport { Literal } from 'src/assets/i18n/literals';\r\nimport { Transaction } from './../../administration/transactions/transactions.models';\r\nimport { TransactionsService } from './../../administration/transactions/transactions.service';\r\nimport { Wallet } from './../../administration/wallets/wallets.models';\r\nimport { WalletsService } from './../../administration/wallets/wallets.service';\r\nimport { NotificationService } from './../../shared/components/notification/notification.service';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { fromNewTransactionActions, fromTransactionsActions } from './../actions';\r\nimport { RootState } from './../states';\r\n\r\n@Injectable()\r\nexport class NewTransactionEffects {\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private notificationService: NotificationService,\r\n    private store: Store<RootState>,\r\n    private transactionsService: TransactionsService,\r\n    private walletsService: WalletsService\r\n  ) { }\r\n\r\n  getDestinationWalletsByUserId$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(fromNewTransactionActions.getDestinationWalletsByUserId),\r\n      switchMap((user: { userId: string; }) => this.walletsService.getWalletsByUserId(user.userId).pipe(\r\n        map((response: ApiResponse<Wallet[]>) => {\r\n          if (!response.body) {\r\n            this.notificationService.error(Literal.administration.newTransaction.errorGettingWallets);\r\n            return fromNewTransactionActions.getDestinationWalletsByUserIdFailed();\r\n          }\r\n          return fromNewTransactionActions.getDestinationWalletsByUserIdSuccess(response);\r\n        })\r\n      )),\r\n      catchError(() => {\r\n        this.notificationService.error(Literal.administration.newTransaction.errorGettingWallets);\r\n        return of(fromNewTransactionActions.getDestinationWalletsByUserIdFailed());\r\n      })\r\n    )\r\n  );\r\n\r\n  addNewTransaction$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(fromNewTransactionActions.addNewTransaction),\r\n      switchMap((newTransaction: Transaction) => this.transactionsService.addNewTransaction(newTransaction).pipe(\r\n        map((response: ApiResponse<Transaction>) => {\r\n          this.store.dispatch(fromTransactionsActions.addTransactionToList(response.body));\r\n          if (!response.body) {\r\n            this.notificationService.error(Literal.administration.newTransaction.errorAddingNewTransaction);\r\n            return fromNewTransactionActions.addNewTransactionFailed();\r\n          }\r\n          this.notificationService.success(Literal.administration.newTransaction.transactionHasBeenSuccessfullyAdded);\r\n          return fromNewTransactionActions.addNewTransactionSuccess(response);\r\n        })\r\n      )),\r\n      catchError(() => {\r\n        this.notificationService.error(Literal.administration.newTransaction.errorAddingNewTransaction);\r\n        return of(fromNewTransactionActions.addNewTransactionFailed());\r\n      })\r\n    )\r\n  );\r\n\r\n}\r\n","import { Action, createReducer, on } from '@ngrx/store';\r\nimport { ApiResponse } from 'src/app/shared/models/response.models';\r\nimport { User } from './../../administration/users/users.models';\r\nimport { fromUsersActions } from './../actions';\r\nimport { UsersState } from './../states';\r\n\r\nexport const INITIAL_USERS_STATE: UsersState = undefined;\r\n\r\nconst usersReducer = createReducer(\r\n  INITIAL_USERS_STATE,\r\n  on(\r\n    fromUsersActions.resetState,\r\n    fromUsersActions.getAllUsers,\r\n    fromUsersActions.getAllUsersFailed,\r\n    () => INITIAL_USERS_STATE\r\n  ),\r\n  on(\r\n    fromUsersActions.getAllUsersSuccess,\r\n    (state: UsersState, data: ApiResponse<User[]>) => ({\r\n      userList: data.body\r\n    })\r\n  ),\r\n  on(\r\n    fromUsersActions.setSelectedUser,\r\n    (state: UsersState, data: User) => ({ ...state, selectedUser: data })\r\n  )\r\n);\r\n\r\nexport function reducer(state: UsersState, action: Action): UsersState {\r\n  return usersReducer(state, action);\r\n}\r\n","import { ActionReducerMap } from '@ngrx/store';\r\nimport { RootState } from './../states';\r\nimport * as fromNewTransactionReducers from './new-transaction.reducers';\r\nimport * as fromTransactionsReducers from './transactions.reducers';\r\nimport * as fromUsersReducers from './users.reducers';\r\nimport * as fromWalletsReducers from './wallets.reducers';\r\n\r\nconst reducers: ActionReducerMap<RootState> = {\r\n  users: fromUsersReducers.reducer,\r\n  wallets: fromWalletsReducers.reducer,\r\n  transactions: fromTransactionsReducers.reducer,\r\n  newTransaction: fromNewTransactionReducers.reducer\r\n};\r\n\r\nexport {\r\n  fromTransactionsReducers,\r\n  fromUsersReducers,\r\n  reducers\r\n};\r\n","import * as fromNewTransactionActions from './new-transaction.actions';\r\nimport * as fromTransactionsActions from './transactions.actions';\r\nimport * as fromUsersActions from './users.actions';\r\nimport * as fromWalletsActions from './wallets.actions';\r\n\r\nexport {\r\n  fromNewTransactionActions,\r\n  fromTransactionsActions,\r\n  fromUsersActions,\r\n  fromWalletsActions\r\n};\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    redirectTo: 'administration'\n  },\n  {\n    path: 'administration',\n    loadChildren: () => import('./administration/administration.module').then(m => m.AdministrationModule)\n  },\n  {\n    path: 'not-found',\n    loadChildren: () => import('./not-found/not-found.module').then(m => m.NotFoundModule)\n  },\n  {\n    path: '**',\n    redirectTo: 'not-found'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export enum NotificationType {\r\n  SUCCESS = 'success',\r\n  ERROR = 'error'\r\n}\r\n\r\nexport interface NotificationData {\r\n  message: string;\r\n  parameters: any;\r\n  type: string;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiResponse } from './../../shared/models/response.models';\r\nimport { Wallet } from './wallets.models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WalletsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getWalletsByUserId(userId: string): Observable<ApiResponse<Wallet[]>> {\r\n    return this.http.get<ApiResponse<Wallet[]>>(`/user/${userId}/wallets`);\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}